//cpp & sln & vcxproj сохраняя структуру проекта

//int *a = new int[10] = { 0 }
/*
игнорирование входного потока
cin.ignore()

int a = 0;
cin >> a;		(10\n) \n - enter остается во входном потоке и читается по завершении работы программы и консоль закрывается
cin.ignore();

еще способ:
scanf("%*s")		* - говорит что считать строку должны, но класть ее никуда не надо. задержка исполнения программы в общем.

nullptr - нулевой указатель

srand(time(nullptr)) инициализация рандомных чисел
int a = rand() % n;		n = const (числа от нуля до n - 1)
*/

/* работа с cin и cout
#include <iostream>
using namespace std; если не писать это то std::cout и std::cin и std::endl;

void main()
{
cout << "Hello, world" << endl; или cout << "Hello, world\n";
}
*/

/* замена массивам - класс ветор
void main()
{
std::vector<n> a;  n - это тип (к примеру - int)
a.push_back(10);
std::cout << a[0];
}
*/

/* класс строк
std::string a;
std::cout << a[0];
*/

/* тернарный оператор
int a = 0;
if (x == y)
{
a = 1;
}
else
{
a = 2
}

ЗАМЕНА:
int a = x == y ? 1 : 2;
*/


//3
/*
~убрать галку "запускать последний успешный билд"

Теперь писать данные, на к-х првоерялись программы.
программа не должна падать при некорректных данных.
проверять крайние значения.
~ что такое юнит-тест
Отладка.
воспроизвести ошибку.
двоичным поиском искать ошибку в программе можно.
.break points
.f9, f10, f11, шаг с заходом и без
.контрольные значения
*/