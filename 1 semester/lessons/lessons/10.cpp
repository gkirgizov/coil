// ГРАФЫ
	//граф - пара(V, E)
	//V - вершина(vertex).
	//E - мн-во ребер вида{(v,w)}
		// v - начало ребра.
		// w - конец ребра.
		// (v,v) - петля.
	//если в графе нет циклов - то граф называется циклическим.
//
//Ориентированный и неориентированный(пути(ребра) симметричны) граф.
//степень неориентированного графа - кол-во выходящих из него ребер.
//
//ПРЕДСТАВЛЕНИЕ ГРАФОВ (ориентированных, т.к. о - частный случай н.)
	// 1. Матрица смежности.
		//Столбцы - вершины.
		//Строки - вершины.
		//элементы матрицы - есть ли путь(входящая и исходящая)(и его вес, или просто его наличие)
		//для неориентированного графа - матрица симетричная отн-но главной диагонали.
	// 2. Матрица инцидентности. (e - ребро)
		//Строки - вершины.
		//Столбцы - ребра.
		//В элементе матрицы:
			//для выходящей вершины - вес(наличие).
			//для входящей вершины - минус вес(минус наличие).
	// 3. Список смежности.
		//Размер списка - количество вершин.
		//Элемент списка - список смежных элементов 
			//(в голове - вершина, элементы подсписка - связанные вершины).
	// 4* Список инцидентности.
		//подходит для мультиграфов.
//
//какието ПОНЯТИЯ
	//Замыкание транзитивности.
	//Компоненты связности - изолированные куски графа.
//
//АЛГОРИТМ ДЕЙКСТРЫ. (найти кратчайшие пути (или один путь - одно и то же) до всех вершин) 
	//~работает на любых графах с неотрицательными весамм.
	//
	//мн-во U - посещенных вершин ( в начале только вершина старта)
	//мн-во граничных вершин.
	//...
//АЛГОРИТМ ФЛОЙДА.
	//есть матрица смежности для графа.
	//~промежуточная вершина должна быть во внешнем цикле.
	//
	//for k = 1 to n do
		//for i = 1 to n do
			//for j = 1 to n do
				//A[i,j] = min( A[i,j], A[i,k] + A[k,j]);
				//P[i,j] = k; //доп массив для восстановления пути потом.
	//
	//Модификация Флойда - алг. Уоршолла. (существует ли путь или нет)
//ОБХОД ГРАФА.
	// 1.1 В глубину:
		//нужно множество посещенных вершин
		//рекурсивная функция просмотра потомков
	// 1.2 
		//с поомщью стека: снимаем родителя, добавляем потомков.
	// 2.1 В ширину:
		//с поомщью очереди (как со стеком)
//ТОПОЛОГИЧЕСКАЯ СОРТИРОВКА
	//источник дуги раньше конца дуги.
	//(можно отсортировать если нет циклов)
	//~частичный порядок
	//DAG (Directed Assigned Graf ?)